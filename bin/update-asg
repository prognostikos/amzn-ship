#!/usr/bin/env ruby

require 'aws'

module ASGUpdater
  AMI = ENV['AMI']
  SECURITY_GROUP_NAME = 'amzn'
  KEY_PAIR_NAME = 'amzn'
  ROLE_NAME = 'amzn'
  BASE_RELEASE = ENV['RELEASE_BUCKET']
  ZONES = ENV['ZONES'].split(',')
  ITYPE = ENV['INSTANCE_TYPE']
  VOLUME_SIZE = ENV['VOLUME_SIZE'].to_i

  def self.execute(app, env)
    release = BASE_RELEASE + "/#{app}/#{env}/current"
    g = asg.groups[key(app, env)]
    if g.exists?
      g.suspend_all_processes
      $stdout.puts("at=asg-suspended group=#{g.name}")
      old_conf = g.launch_configuration
      new_conf = create_launch_configuration(g, app, env, AMI, release)
      $stdout.puts("at=asg-launch-config-created group=#{g.name}")
      g.update(launch_configuration: new_conf)
      old_conf.delete
      $stdout.puts("at=asg-launch-config-deleted group=#{g.name}")
      g.resume_all_processes
      $stdout.puts("at=asg-resumed group=#{g.name}")
    else
      $stdout.puts("at=missing-group")
    end
  end

  def self.create_launch_configuration(g, app, env, ami, release)
    asg.launch_configurations.create(key(app, env)+"-#{Time.now.to_i}", ami, ITYPE,
      security_groups: [SECURITY_GROUP_NAME],
      key_pair: KEY_PAIR_NAME,
      user_data: compile_user_data(app, release),
      iam_instance_profile: ROLE_NAME,
      block_device_mappings: [{
        device_name: "/dev/sda1",
        ebs: {volume_size: VOLUME_SIZE}
      }]
    )
  end

  def self.key(app, env)
    [app, env].join('-')
  end

  def self.compile_user_data(app, release)
    script = File.read("templates/user-data")
    script.gsub!("{{APP}}", app)
    script.gsub!("{{RELEASE_URL}}", release)
    return script
  end

  def self.asg
    @asg ||= begin
      AWS::AutoScaling.new(
        :access_key_id => ENV['AWS_ACCESS_KEY_ID'],
        :secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']
      )
    end
  end

end

if $0 == __FILE__
  ASGUpdater.execute(ARGV[0], ARGV[1])
end
